//You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day.
//The access time is represented as four digits using a 24-hour time format, for example, "0800" or "2250".
//An employee is said to be high-access if he has accessed the system three or more times within a one-hour period.
//Times with exactly one hour of difference are not considered part of the same one-hour period. For example, "0815" and "0915" are not part of the same one-hour period.
//Access times at the start and end of the day are not counted within the same one-hour period. For example, "0005" and "2350" are not part of the same one-hour period.
//Return a list that contains the names of high-access employees with any order you want.
class Solution {
public:
    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
        unordered_map<string,vector<int>> mp = convertInMin(access_times);
        vector<string> res;
        for(auto t:mp){
            sort(t.second.begin(),t.second.end());
            
            for(int i=2;i<t.second.size();i++){
                if((t.second[i]-t.second[i-2])<60){
                    res.push_back(t.first);
                    break;
                }
            }
        }
        return res;
    }

private:
    unordered_map<string,vector<int>> convertInMin(vector<vector<string>>& access_times){
        unordered_map<string,vector<int>> mp;
        for(int i=0;i<access_times.size();i++){
            int time=((access_times[i][1][0]-'0')*10+(access_times[i][1][1]-'0'))*60+(access_times[i][1][2]-'0')*10+(access_times[i][1][3]-'0');
            mp[access_times[i][0]].push_back(time);
        }
        return mp;
    }
};
